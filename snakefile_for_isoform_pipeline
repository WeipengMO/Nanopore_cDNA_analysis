'''
A pipline for nanopore cdna
You can run like this:
snakemake -j 6 -c "qsub -N {rulename} -l nodes=1:ppn={threads} -l mem=32g -j oe -l walltime=900:00:00"
'''

import os
import glob

configfile: 'config.yml'


SAMPLE_NAME = os.path.basename(os.getcwd())
STRAND = ['positive', 'negative']
TYPE = ['spliced', 'intronless']


rule all:
    input:
        expand('full_len/{sample_name}.adjust.sorted.polii.tagged.full_len.bam', sample_name=SAMPLE_NAME),
        expand('full_len/{sample_name}.full_len.bed.splice_stats.tsv', sample_name=SAMPLE_NAME),
        expand('polya_sites/{sample_name}.polya_cluster.bed', sample_name=SAMPLE_NAME)

#######################################
# Pre-process
#######################################


# Adjust read strandedness and 3'adapter filter
rule adjust_strandedness:
    input:
        'basecalled_data/{sample_name}.fastq.gz',
    output:
        'basecalled_data/{sample_name}.adjust.fastq.gz'
    threads: 1
    params:
        polya_file=config['polya_data']
    shell:
        '''
python script/adjust_strandedness.py -i {input} -o {output} -p {params}
        '''


rule minimap2_map_genome:
    input:
        reads='basecalled_data/{sample_name}.adjust.fastq.gz',
        ref=config['genome'],
        bed=config['ann_bed']
    output:
        bam='aligned_data/{sample_name}.adjust.sorted.bam'
    threads: 32
    shell:
        '''
minimap2 -t {threads} -ax splice -G 10000 --secondary=no --cs \
--junc-bed {input.bed} --sam-hit-only {input.ref} {input.reads} \
| samtools sort -@ {threads} -O bam -o {output.bam} -
samtools index -@10 {output.bam}
        '''


rule keep_polii_transcripts:
    input:
        'aligned_data/{sample_name}.adjust.sorted.bam'
    output:
        'aligned_data/{sample_name}.adjust.sorted.polii.bam'
    threads: 1
    params:
        config['excludable_region']
    shell:
        '''
bedtools intersect -v -abam {input} -b {params} > {output}
samtools index -@10 {output}
        '''


rule bedtools_intersect:
    input:
        'aligned_data/{sample_name}.adjust.sorted.polii.bam'
    output:
        'aligned_data/{sample_name}.adjust.sorted.polii.bed.intersect'
    threads: 1
    params:
        config['ann_bed']
    shell:
        '''
bedtools intersect -abam {input} -b {params} -wo -s -split -bed > {output}
        '''


rule parse_bedtools_output:
    input:
        'aligned_data/{sample_name}.adjust.sorted.polii.bed.intersect'
    output:
        'aligned_data/{sample_name}.adjust.sorted.polii.bed.pkl'
    threads: 1
    shell:
        '''
python script/parse_bedtools_output.py -i {input} -o {output}
        '''


# add polya length and gene_id to bam tags
rule add_tags_to_bam:
    input:
        infile='aligned_data/{sample_name}.adjust.sorted.polii.bam',
        bed_intersect='aligned_data/{sample_name}.adjust.sorted.polii.bed.pkl'
    output:
        'aligned_data/{sample_name}.adjust.sorted.polii.tagged.bam'
    params:
        config['polya_data']
    threads: 1
    shell:
        '''
python script/add_tag_to_bam.py -i {input.infile} -o {output} --read_info {params} --bed_intersect {input.bed_intersect}
samtools index -@10 {output}
        '''


rule get_full_len_transcripts:
    input:
        'aligned_data/{sample_name}.adjust.sorted.polii.tagged.bam'
    output:
        'full_len/{sample_name}.adjust.sorted.polii.tagged.full_len.bam'
    threads: 1
    params:
        first_exon_path='/public/home/mowp/db/Arabidopsis_thaliana/representative_gene_model/representative_gene_first_exon.bed'
    shell:
        '''
python script/remove_five_prime_lost.py -i {input} -o {output} --first_exon_path {params.first_exon_path}
sleep 20
samtools index -@ 16 {output}
        '''


rule bedtools_intersect_for_spliced:
    input:
        'full_len/{sample_name}.adjust.sorted.polii.tagged.full_len.bam'
    output:
        'full_len/{sample_name}.adjust.sorted.polii.tagged.full_len.bed.intersect'
    params:
        repr_bed='~/db/Arabidopsis_thaliana/representative_gene_model/araport11.representative.gene_model.bed'
    shell:
        '''
bedtools intersect -abam {input} -b {params.repr_bed} -wo -s -split -bed > {output}
        '''


rule get_splice_stats:
    input:
        'full_len/{sample_name}.adjust.sorted.polii.tagged.full_len.bed.intersect'
    output:
        'full_len/{sample_name}.full_len.bed.splice_stats.tsv'
    shell:
        '''
python script/get_splice_stats.py -i {input} -o {output}
        '''
        

rule get_polya_cluster:
    input:
        bam='aligned_data/{sample_name}.adjust.sorted.polii.tagged.bam',
    output:
        'polya_sites/{sample_name}.polya_cluster.bed',
        'polya_sites/{sample_name}.polya_cluster.summit.bed',
        'polya_sites/{sample_name}.major_polya_cluster.bed',
        'polya_sites/{sample_name}.major_polya_cluster_summit.bed'
    params:
        suffix='polya_sites/{sample_name}',
        gene_bed=config['gene_bed']
    threads: 1
    shell:
        '''
python script/get_polya_cluster.py --infile {input.bam} --gene_bed {params.gene_bed} --out_suffix {params.suffix}
        '''

#######################################
# Get gene list
#######################################

rule bam_to_bed:
    input:
        'aligned_data/{sample_name}.tagged.mm2.sorted.bam'
    output:
        'gene_list/{sample_name}.tagged.mm2.sorted.bed',
    threads: 1
    shell:
        '''
        bedtools bamtobed -i {input} > {output}
        '''

# separating bedfile between positive and negative reads
rule separate_bed_file:
    input:
        'gene_list/{sample_name}.tagged.mm2.sorted.bed'
    output:
        positive = 'gene_list/{sample_name}.positive.bed',
        negative = 'gene_list/{sample_name}.negative.bed'
    threads: 1
    run:
        with open(output.positive, "w") as positive, open(output.negative, "w") as negative, open(input[0], 'r') as infile:
            for line in infile:
                parts=line.rstrip().split('\t')
                if len(parts) >= 6 and parts[5] == "+":
                    positive.write(line)
                elif len(parts) >= 6 and parts[5] == "-":
                    negative.write(line)


rule bed_to_fasta:
    input:
        bed = 'gene_list/{sample_name}.{strand}.bed',
        reference = config['genome']
    output:
        temp('gene_list/{sample_name}.{strand}.fasta')
    threads: 1
    shell:
        '''
        bedtools getfasta -s -fi {input.reference} -bed {input.bed} -fo {output}
        '''


rule remapping:
    input:
        reads='gene_list/{sample_name}.{strand}.fasta',
        ref=config['genome']
    output:
        temp_bam=temp('gene_list/{sample_name}.{strand}.tmp.bam'),
        bam='gene_list/{sample_name}.{strand}.mm2.sorted.bam'
    threads: 64
    shell:
        '''
        minimap2 -t {threads} -ax splice -ub -k14 -G 10000 \
            --secondary=no --cs {input.ref} {input.reads} \
            | samtools view -Sb - > {output.temp_bam}
        samtools sort -@ {threads} -o {output.bam} {output.temp_bam}
        samtools index {output.bam}
        '''

# 得到基因组单碱基覆盖度
rule genomecov:
    input:
        'gene_list/{sample_name}.{strand}.mm2.sorted.bam'
    output:
        'gene_list/{sample_name}.{strand}_coverage.tsv'
    threads: 1
    shell:
        '''
        bedtools genomecov -d -ibam {input} > {output}
        '''

# 将正负链覆盖度文件合并
rule combine_coverage:
    input:
        positive='gene_list/{sample_name}.positive_coverage.tsv',
        negative='gene_list/{sample_name}.negative_coverage.tsv'
    output: 
        'gene_list/{sample_name}.total_coverage.tsv'
    threads: 1
    shell:
        '''
        python script/combine_coverage.py --positive {input.positive} --negative {input.negative} --output {output}
        '''

# 找连续的overlap的reads区间
rule find_coverage_breaks:
    input:
        'gene_list/{sample_name}.{strand}_coverage.tsv'
    output:
        'gene_list/{sample_name}.{strand}_genelist_incomplete.bed'
    params:
        min_coverage_threshold = 6
    threads: 1
    shell:
        '''
        python script/find_coverage_breaks.py --infile {input} --outfile {output} --min_coverage_threshold {params.min_coverage_threshold}
        '''
        

rule genome_cov_3dash:
    input:
        'gene_list/{sample_name}.{strand}.mm2.sorted.bam'
    output:
        'gene_list/{sample_name}.{strand}.3dash_positions.tsv'
    threads: 1
    shell:
        '''
        bedtools genomecov -dz -3 -ibam {input} > {output}
        '''


rule genome_cov_5dash:
    input:
        'gene_list/{sample_name}.{strand}.mm2.sorted.bam'
    output:
        'gene_list/{sample_name}.{strand}.5dash_positions.tsv'
    threads: 1
    shell:
        '''
        bedtools genomecov -dz -5 -ibam {input} > {output}
        '''


# Intersect genes start and end positions from the coverage analysis and cuts to refine our analysis
rule insert_dash_cuts:
    input:
        in3dash = 'gene_list/{sample_name}.{strand}.3dash_positions.tsv',
        in5dash = 'gene_list/{sample_name}.{strand}.5dash_positions.tsv',
        chromosome_data = 'gene_list/{sample_name}.{strand}_genelist_incomplete.bed'
    output:
        'gene_list/{sample_name}.{strand}.genelist.bed'
    threads: 1
    shell:
        '''
        python script/insert_dash_cuts.py \
            --in3dash_file {input.in3dash} \
            --in5dash_file {input.in5dash} \
            --outfile {output} \
            --chromosome_data {input.chromosome_data}
        '''
        

rule combine_chr_lists:
    input:
        positive = 'gene_list/{sample_name}.positive.genelist.bed',
        negative = 'gene_list/{sample_name}.negative.genelist.bed'
    output:
        'gene_list/{sample_name}.full_genelist.bed'
    threads: 1
    shell:
        '''
        python script/combine_chr_lists.py --positive {input.positive} --negative {input.negative} --outfile {output}
        '''


#######################################
# Find splice sites
#######################################

rule bam_to_bed_split:
    input:
        'aligned_data/{sample_name}.tagged.mm2.sorted.bam'
    output:
        'splicing_isoforms/{sample_name}.tagged.mm2.sorted.split.bed'
    threads: 1
    shell:
        '''
        bedtools bamtobed -split -i {input} > {output}
        '''

# Finding splicing isoforms
rule find_splice_sites:
    input:
        'splicing_isoforms/{sample_name}.tagged.mm2.sorted.split.bed'
    output:
        'splicing_isoforms/{sample_name}.spliced.tsv'
    threads: 1
    shell:
        '''
        python script/find_splice_sites.py --infile {input} --outfile {output}
        '''


rule find_intronless_transcripts:
    input:
        'splicing_isoforms/{sample_name}.tagged.mm2.sorted.split.bed'
    output:
        'splicing_isoforms/{sample_name}.intronless.tsv'
    threads: 1
    shell:
        '''
        python script/find_intronless_transcripts.py --infile {input} --outfile {output}
        '''


# Translating to bed format for the final results
rule convert_isoforms_to_bed:
    input:
        'splicing_isoforms/{sample_name}.{type}.tsv'
    output:
        temp = temp('splicing_isoforms/{sample_name}.{type}.bed.tmp'),
        bed = 'splicing_isoforms/{sample_name}.{type}.bed'
    threads: 1
    shell:
        '''
        bedtools sort -i {input} > {output.temp}
        python script/convert_isoforms_to_bed.py --infile {output.temp} --outfile {output.bed}
        '''


rule get_full_length_isoform:
    input:
        'splicing_isoforms/{sample_name}.{type}.bed'
    output:
        'splicing_isoforms/{sample_name}.{type}.full_length.bed'
    threads: 1
    params:
        # ❗ 此处未写进配置文件
        'supplementary_data/get_representative_gene_model/representative_gene_first_exon.bed'
    shell:
        '''
        bedtools intersect -a {input} -b {params} -wa -s > {output}
        '''

rule merge_bedfile:
    input:
        spliced = 'splicing_isoforms/{sample_name}.spliced.full_length.bed',
        intronless = 'splicing_isoforms/{sample_name}.intronless.full_length.bed'
    output:
        'splicing_isoforms/{sample_name}.full_length_isoform.bed'
    threads: 1
    shell:
        '''
        cat {input.spliced} {input.intronless} | bedtools sort -i - | uniq - > {output}
        '''


rule get_fasta_from_isoform:
    input:
        'splicing_isoforms/{sample_name}.full_length_isoform.bed'
    output:
        'splicing_isoforms/{sample_name}.full_length_isoform.fasta'
    params:
        config['genome']
    threads: 1
    shell:
        '''
        bedtools getfasta -fi {params} -name -s -split -bed {input} > {output}.tmp
        python script/parse_bedtofasta_output.py {output}.tmp > {output}
        rm {output}.tmp
        '''